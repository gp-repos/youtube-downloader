using System;
using System.Data.Common;
using System.Data.SQLite;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using System;
using System.IO;
using System.Linq;

namespace YouTubeDownloader;

public static class CookieHelper
{

    public static string CookieCopier()
    {
        var searchDirectory = "g:\\2";

        // Validate the directory
        if (!Directory.Exists(searchDirectory))
        {
            return "The specified directory does not exist.";
        }

        // Get the application's launch directory
        var launchDirectory = AppDomain.CurrentDomain.BaseDirectory;

        try
        {
            // Find all .txt files in the directory and sort them by creation time (newest first)
            var txtFiles = Directory.GetFiles(searchDirectory, "*.txt")
                .OrderByDescending(File.GetCreationTime);

            // Process each file
            foreach (var file in txtFiles)
            {
                // Check if the file contains the specified text
                var isNetscapeCookieFile = false;
                foreach (var line in File.ReadLines(file))
                {
                    if (line.Contains("Netscape HTTP Cookie File")) 
                        isNetscapeCookieFile = true;
                    
                    if (isNetscapeCookieFile && line.Contains("youtube.com"))
                    {
                        var destinationPath = Path.Combine(launchDirectory, "youtube_cookies.txt");

                        // Copy the file to the application directory
                        File.Copy(file, destinationPath, overwrite: true);

                        return "Cookies successfully updated.";
                    }
                }
            }

            return "Failed to update cookies.";;
        }
        catch (Exception ex)
        {
            return $"An error occurred: {ex.Message}";
        }
    }


    public static void GetCookies()
    {
        // Path to Edge cookies database
        var userProfile = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);
        var edgeCookiesPath = Path.Combine(userProfile, "AppData", "Local", "Microsoft", "Edge", "User Data", "Default",
            "Network", "Cookies");

        // Check if the file exists
        if (!File.Exists(edgeCookiesPath))
        {
            Console.WriteLine("Edge cookies database not found.");
            return;
        }

        // Destination file
        var outputFile = "youtube_cookies.txt";

        try
        {
            // Copy database to avoid locking issues
            var tempDbPath = Path.Combine(Path.GetTempPath(), "CookiesTemp.db");
            File.Copy(edgeCookiesPath, tempDbPath, true);

            // Query cookies
            var query = "SELECT host_key, path, is_secure, expires_utc, name, encrypted_value FROM cookies WHERE host_key LIKE '%youtube.com%'";

            using (var connection = new SQLiteConnection($"Data Source={tempDbPath};"))
            {
                connection.Open();
                using (var command = new SQLiteCommand(query, connection))
                using (var reader = command.ExecuteReader())
                {
                    using (var writer = new StreamWriter(outputFile, false, Encoding.UTF8))
                    {
                        // Write Netscape HTTP Cookie File header
                        writer.WriteLine("# Netscape HTTP Cookie File");
                        writer.WriteLine("# This file was generated by a custom C# application.");
                        writer.WriteLine();

                        // Write cookies
                        while (reader.Read())
                        {
                            var host = reader.GetString(0);
                            var path = reader.GetString(1);
                            var isSecure = reader.GetBoolean(2);
                            var expiresUtc = reader.GetInt64(3);
                            var name = reader.GetString(4);
                            var encryptedValue = (byte[])reader["encrypted_value"];

                            // Decrypt the cookie value
                            var value = DecryptCookie(encryptedValue);
      
                            
                            // Convert expiration time
                            var expiration = DateTimeOffset.FromUnixTimeSeconds((expiresUtc - 11644473600000000) / 1000000);

                            // Format: domain, flag, path, secure, expiration, name, value
                            writer.WriteLine($"{host}\t" +
                                             $"{(host.StartsWith(".") ? "TRUE" : "FALSE")}\t" +
                                             $"{path}\t" +
                                             $"{(isSecure ? "TRUE" : "FALSE")}\t" +
                                             $"{expiration.ToUnixTimeSeconds()}\t" +
                                             $"{name}\t" +
                                             $"{value}");
                        }
                    }
                }
            }

            // Clean up
            File.Delete(tempDbPath);
            Console.WriteLine($"Cookies saved to {outputFile}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }
    
    // Function to decrypt cookies using DPAPI
    private static string DecryptCookie(byte[] encryptedValue)
    {
        try
        {
            // Chromium prefixes encrypted values with "v10" or "v11". Skip the prefix.
            var decryptedData = ProtectedData.Unprotect(encryptedValue, null, DataProtectionScope.CurrentUser);
            return Encoding.UTF8.GetString(decryptedData);
        }
        catch (Exception ex)
        {
            return $"[Error decrypting cookie: {ex.Message}]";
        }
    }
}